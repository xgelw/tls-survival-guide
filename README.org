* Introduction

When a TLS connection is setup various checks are done by the TLS server as well as the TLS client.

This documentation shall help to diagnose TLS connection setup issues in a systematic way by verifying configurations on the server and client side.

Where appropriate, this documentation will show snippets how to use OpenSSL, nmap, sslscan2, tcpdump or network traces to identify configurations of either the server side or client. Please keep in mind that the main objective of TLS is to establish confidentiality and integrity. So at some point of time "looking at the wire" won't reveal anything anymore. This is even more true with TLS 1.3 in case the handshake is also encrypted (ECH) and even less information can be retrieved from the initial connection setup.

A word of warning: this guide won't provide you with the magic-bullet-script which will resolve all your TLS connection issues - you'll have to verify configurations and information you receive from your endpoints. All these configurations are specific to the tools/libraries/software you are using. The magic bullet will be your analytical skills. After all there are not too many things that can go wrong when using TLS ;) Please also note that this guide will focus mostly on things which can go wrong due to incorrect configuration of the TLS server and TLS client.

* Diagnosing Connection Setup Issues Along the TLS Handshake
** Client Hello

The client initiates the TCP connection towards the server and once established sends the "Client Hello".

Verifications done on server side:

*** TLS Version

The client sends the supported (SSL) TLS versions as part of the handshake. The server will verify if there is an overlap with supported TLS versions configured on the server side.

In case there are is no overlap in the supported (SSL) TLS version, the server will tell the client that the handshake failed.

Verify that the client and server have an overlap in the supported (SSL) TLS versions.

For TLS <= 1.2 the following command can be used to list the TLS versions supported by the server:

#+begin_src sh
nmap -sV --script ssl-enum-ciphers -p $PORT $SERVER
#+end_src

In case you want to test if TLS 1.3 is supported as well, then issue the following command:

#+begin_src sh
openssl s_client -no_ssl3 -no_tls1 -no_tls1_1 -no_tls1_2 -connect $SERVER:$PORT -servername $SERVER
#+end_src

*** Ciphers

Similar to the TLS version the client will also send a list of supported ciphers. The TLS server will verify if there is an overlap with the supported ciphers configured on server side. In cases there is no overlap, the server will tell the client that the handshake failed.

You can probe which ciphers are supported by the server, by probing the TLS server with all the ciphers supported by your OpenSSL client:

 #+begin_src sh
function tlsTestCiphers() {
  SERVER=$1
  PORT=$2
  SERVERNAME="${3:-$SERVER}"
  declare -a TLS_VER=( "tls1" "tls1_1" "tls1_2" "tls1_3" )
  for TLS in ${TLS_VER[@]}; do
    echo "Testing TLS: ${TLS}"
    SUPPORTED_CIPHERS=$(openssl ciphers -s -${TLS} "ALL:eNULL" | sed -e 's/:/ /g')
    for CIPHER in ${SUPPORTED_CIPHERS[@]}; do
      echo -n "TLS: ${TLS} - cipher: ${CIPHER}"
      CIPHER_COMMAND="-cipher"
      if [[ "${TLS}" == "tls1_3" ]]; then
        CIPHER_COMMAND="-ciphersuites"
      fi
      OPENSSL_OUTPUT=$(openssl s_client -connect $SERVER:$PORT -servername $SERVERNAME -${TLS} $CIPHER_COMMAND $CIPHER < /dev/null 2>&1)
      if [[ $? -eq 0 ]]; then
        echo " - Successful"
      else
        ERROR_INFO=$()
        echo " - Failed; $(echo "${OPENSSL_OUTPUT}" | head -n 1 | awk -F : '{print $NF}')"
      fi
      sleep 1
    done
  done
}
#+end_src

In order to test the ciphers supported by the target server, use the function as follows:

#+begin_src sh
tlsTestCiphers $SERVER $PORT
#+end_src

You can lookup any reported error codes at the RFC [[https://datatracker.ietf.org/doc/html/rfc8446#appendix-B.2]]

Please note that the above test may miss supported ciphers as your client is probing only for ciphers supported by your client whereas the target server may support more than your client.

In order to see which ciphers are supported by the client, you'll have to take a network capture and then analyze it using Wireshark (or tshark if you prefer the command line).

Capture a TLS handshake as follows (make sure that the environment variables for ~SERVER~ and ~PORT~ are set):

#+begin_src sh
tcpdump -i any -s 65565 -o client_hello.pcap "tcp and host ${SERVER} and port ${PORT}"
#+end_src

Now initiate the connection from your client. And once done, press stop the network capture.

You can inspect the supported ciphersuites sent by the client as follows:

#+begin_src sh
tshark -2 -r client_hello.pcap --enable-protocol tls -R "ssl" -T text -V | egrep "Cipher Suite[s]?|Version: TLS"
#+end_src

which will produce:

#+begin_example
Version: TLS 1.0 (0x0301)
    Version: TLS 1.2 (0x0303)
    Cipher Suites Length: 56
    Cipher Suites (28 suites)
        Cipher Suite: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 (0xc02c)
        Cipher Suite: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)
...
        Cipher Suite: TLS_RSA_WITH_AES_128_CBC_SHA (0x002f)
        Cipher Suite: TLS_EMPTY_RENEGOTIATION_INFO_SCSV (0x00ff)
#+end_example

*** TLS SNI Handling

TLS SNI allows a TLS server to present different certificates to a client based ot the server name the client used to connect to the server (or more correct: based on the server name the client put into the TLS SNI field in the Client Hello). In case the TLS server receives a Client Hello without a TLS SNI header, then it might happen that the server will terminate the session (whereas the server then usually uses a default configuration). See [[https://datatracker.ietf.org/doc/html/rfc6066#section-3]].

TLS SNI is usually supported by clients.

In case the client receives a ServerHello back with a different certificate than expected, then:
- verify if the server has the (virtual) host based on TLS SNI properly configured or
- verify if the client supports TLS SNI and the correct server name has been set.

You can use OpenSSL s_client to see how the TLS server responds in case of specific server names send in the TLS SNI extension like so:

#+begin_src sh
openssl s_client -connect $SERVER:$PORT -servername YOUR_RANDOM_TLS_SNI_SERVER_NAME
#+end_src

In order to see if the client sends a TLS SNI extension, you can inspect a network capture using Wireshark or tshark:

#+begin_src sh
tshark -2 -r client_hello.pcap --enable-protocol tls -R "ssl" -T text -V | egrep "server_name|Server Name"
#+end_src

which will show the server name ~foobar~ is included in the TLS SNI extension:

#+begin_example
Extension: server_name (len=11)
    Type: server_name (0)
    Server Name Indication extension
        Server Name list length: 9
        Server Name Type: host_name (0)
        Server Name length: 6
        Server Name: foobar
#+end_example

In case your client supports encrypted SNI (ESNI) make sure, that the DNS records are properly setup:

#+begin_src sh
dig _esni.crypto.dance TXT +short $SERVER
#+end_src

Please note, that OpenSSL doesn't support ESNI. Full handshake encryption (ECH) is preferred over ESNI. You can read more about ESNI and ECH here: [[https://blog.cloudflare.com/encrypted-client-hello/]].


** Server Hello

When the TLS server is OK with the Client Hello, it will send back a ServerHello message to the client. The ServerHello includes (amongst other things) the following information:

- TLS version selected by the server
- Cipher used be the server
- Server certificate and certificate chain
- The list of acceptable client CAs

*** TLS Client verifies Server Certificate (and Chain)

The server presents a X509 certificate which the client inspects. Usually the client verifies the following:

- is the /CN/ or the /Subject Alternative Names/ matching the server name to which the client connected
- is the validity date range of the server certificate still valid
- are the certificates from the certificate chain valid
- can the client link the certificate chain to a certificate the client trusts

In order to show the /CN/ and/or /Subject Alternative Names/ you can use the following command:

#+begin_src shell
openssl s_client -connect $SERVER:$PORT -servername $SERVER | openssl x509 -in - -text | egrep "Validity|Not Before|Not After|Subject:|Subject Alternative|DNS:"
#+end_src

Verify that the names mentioned in the /Subject Alternative Names/ section match the server name you are using to connect to. In case your client is validating that the presented name in the certificate matches the name used for establishing the connection it will abort if they differ. In case there is no /Subject Alternative Name/ present, then the name given in the /CN/ part of the distinguished name will used for the comparison.

The client will also usually abort if the locale time of the client is not within the validity time range of the server certificate.

The server will also transmit the issuer certificate chain which issued the server certificate. The client will verify if the current date is within the validity date range of the certificates of the chain.

#+begin_src shell
function tlsGetChain() {
  SERVER=$1
  PORT=$2
  SERVERNAME="${3:-$SERVER}"

  TMP_FILE=$(mktemp)
  echo Q | openssl s_client -connect $SERVER:$PORT -servername $SERVER -showcerts > "${TMP_FILE}"
  openssl crl2pkcs7 -nocrl -certfile "${TMP_FILE}" | openssl pkcs7 -print_certs -text -noout
}

tlsGetChain $SERVER $PORT | egrep "Certificate:|Validity|Not Before|Not After|Subject:|Subject Alternative|DNS:|Issuer:"
#+end_src

The TLS client can also verify the revocation state of the server certificate and the certificate chain presented. In order to do so, the client will query the /CRL/ (Certificate Revocation List) enpoint or use /OCSP/ (Online Certificate Status Protocol) as defined by the certificate issuer of the certificate. In order to see if a /CRL/ or /OCSP/ endpoint has been defined, you need to inspect the server certificate and server certificate chain:

#+begin_src shell
tlsGetChain $SERVER $PORT | egrep -i "Certificate:|Subject:|Issuer:|X509v3 CRL Distribution Points|crl|OCSP"
#+end_src

Please note that the above grep may miss CRL endpoints, in case they do not have a ~CRL~ in their name.

OpensSSL can query the status of the certificates using CRLs in case we ask in to do so:

#+begin_src shell
echo Q | openssl s_client -connect $SERVER:$PORT -servername $SERVER -crl_check_all -crl_download | egrep "depth|Verify"
#+end_src

Usually TLS servers do not transmit the root CA of the chain as the client will have to establish the trust to this root CA on it's own anyway (see below). In such a case the above check will report an error that the CRL can not be downloaded for the root CA.

Besides using a /CRL/ it's also possible that an /OCSP/ endpoint is defined for verifying the revocation status of a certificate. In order to do so, one must extract the /OCSP/ endpoint listed in the certificate (in case there is one defined) and then query this endpoint:

#+begin_src shell
function ocspVerification() {
  SERVER=$1
  PORT=$2
  SERVERNAME="${3:-$SERVER}"

  CERT_FILE=$(mktemp)
  CHAIN_FILE=$(mktemp)
  echo Q | openssl s_client -connect $SERVER:$PORT -servername $SERVER > "${CERT_FILE}"
  echo Q | openssl s_client -connect $SERVER:$PORT -servername $SERVER -showcerts > "${CHAIN_FILE}"
  nl -w2 -s': ' "${CHAIN_FILE}" > "${CHAIN_FILE}.ln"
  LINE_SECOND_CERT=$(grep -m 2 "BEGIN CERTIFICATE-----" "${CHAIN_FILE}.ln" | tail -n 1 | sed -r 's/([0-9]):.*/\1/')
  tail -n "+${LINE_SECOND_CERT}" "${CHAIN_FILE}" > "${CHAIN_FILE}.issuers"
  
  OCSP_URL=$(openssl x509 -in "${CERT_FILE}" -noout -ocsp_uri)
  OCSP_HOST=$(echo "${OCSP_URL}" | sed -r 's!http[s]?://([^/]*)[/]?.*!\1!')

  echo "OCSP URL: ${OCSP_URL}"
  echo "OCSP HOST: ${OCSP_HOST}"
  if [[ "${OCSP_URL}" != "" ]]; then
    openssl ocsp -issuer "${CHAIN_FILE}.issuers" -cert "${CERT_FILE}" -text -header "Host=${OCSP_HOST}" -url "${OCSP_URL}"
  else
    echo "Unable to extract an OCSP endpoint from the certificate"
  fi
}

ocspVerification $SERVER $PORT
#+end_src

You should see the OCSP request and the OCSP response:

#+begin_example
...
OCSP Response Data:
    OCSP Response Status: successful (0x0)
    Response Type: Basic OCSP Response
...
    Cert Status: good
...
#+end_example

Another verification that might be executed by a TLS client is to verify that the certificate`s purpose (e.g. TLS server, TLS client) is properly set. Again, OpenSSL can help to verify this:

#+begin_src shell
echo Q | openssl s_client -connect $SERVER:$PORT -servername $SERVER -purpose sslserver | grep "Verify return code"
#+end_src

which will return

#+begin_example
Verify return code: 0 (ok)
#+end_example

in case the purpose of the server certificate matches "TLS Web Server Authentication" or 

#+begin_example
Verify return code: 26 (unsupported certificate purpose)
#+end_example

otherwise.

The issuing CAs have additional certificates set which designate if they are a CA and optionally if the certificates they issue are again allowed to become a CA (and up to which level this is allowed). Clients sometimes verify these settings as well.

#+begin_src shell
tlsGetChain $SERVER $PORT | egrep -i "Certificate:|Subject:|Issuer:|X509v3 Basic Constraints:|CA:(TRUE|FALSE)"
#+end_src

The client will also have to establish a trust relationship for the certificate/certificate-chain sent by the server. The client will usually try to complete the certificate chain sent by using it's local set of certificates which are trusted. In case the client can complete the chain up to a self-signed (and thus root) certificate, then the client is trusting the chain and ultimately the server certificate.

/...to be continued.../

** Optionally: TLS Client Authentication

During the /ServerHello/ then TLS server may send a list of /Acceptable Client CAs/. This list indicates to the client that it shall present a TLS client certificate issued by one on the CAs.

The TLS Client now tries to select a matching TLS client certificate. The client may also select a TLS client certificate which was not issued by the provided CAs.

Once the client has selected a TLS client certificate, it will send this certificate (amongst other things) to the TLS server. The client may send the issuing CA chain as part of this request to the server, so that the server can build a chain of trust.

Upon receipt of the TLS client certificate, the server will now do the following verifications. Please note that the kind of verifications done are TLS server specific and very quite a log amongst TLS servers:

- Can the TLS server build a chain of trust for the provided TLS client certificate? The chain might be build against a different trusted CA than presented as part of the /Acceptable Client CAs/.
- The TLS server verifies that the TLS client certificates validity date range is still valid.
- The TLS server verifies that the TLS client certificate contains the X509 attribute "TLS Client Authentication"
- The TLS server verifies the revocation status by either using CRL or OCSP.
- TLS servers may have an additional fine-grained allow-/block-list based on various attributes of the TLS client certificate

* Wrapup

The verifications described above usually accounted for most of the TLS handshake issues I've experienced it the past. Most of the time the root causes are easy to analyze: incorrect time of client or server; or the client doesn't trust the server certificate (or vice versa).

You also will need to understand the specific configuration and validation options of the server and client components/libraries you are using. Some of them do more verifications than others. Most of the servers/clients I've seen in the past provide information in their logs why a TLS handshake failed, but most of the time these logs are now very verbose or such logs need to be enabled beforehand. In non-trivial cases a network capture of the TLS handshake will help a lot to diagnose the root cause. Wireshark does a great job of providing a human friendly rendering of the handshake.
